#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in the BST
struct node {
    int data;
    struct node *left;
    struct node *right;
};

// Function to create a new node
struct node *createNode(int value) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a new node into BST
struct node *insert(struct node *root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to perform inorder traversal of BST
void inorder(struct node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Function to perform preorder traversal of BST
void preorder(struct node *root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Function to perform postorder traversal of BST
void postorder(struct node *root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

// Function to search for a key in BST
struct node *search(struct node *root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }
    if (root->data < key) {
        return search(root->right, key);
    }
    return search(root->left, key);
}

int main() {
    struct node *root = NULL;
    int choice, key;
    
    // Creating the BST with given elements
    int elements[] = {6, 9, 5, 2, 8, 15, 24, 14, 7, 8, 5, 2};
    int numElements = sizeof(elements) / sizeof(elements[0]);
    for (int i = 0; i < numElements; i++) {
        root = insert(root, elements[i]);
    }

    do {
        printf("\nMenu:\n");
        printf("1. Traverse BST (Inorder)\n");
        printf("2. Traverse BST (Preorder)\n");
        printf("3. Traverse BST (Postorder)\n");
        printf("4. Search for a key\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Inorder traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 2:
                printf("Preorder traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 3:
                printf("Postorder traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 4:
                printf("Enter key to search: ");
                scanf("%d", &key);
                if (search(root, key) != NULL) {
                    printf("Key found in BST.\n");
                } else {
                    printf("Key not found in BST.\n");
                }
                break;
            case 5:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    } while (choice != 5);

    return 0;
}
